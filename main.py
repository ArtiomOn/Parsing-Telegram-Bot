import datetime
import json
import logging
import os

import dotenv
import requests
from aiogram import Bot, Dispatcher, executor, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import StatesGroup, State
from bs4 import BeautifulSoup
from googletrans import Translator
from sqlalchemy.orm import sessionmaker
from sqlalchemy.util import asyncio

from models import database_dsn, Note, Translation
from graphs import draw_font_table

logging.basicConfig(level=logging.INFO)

dotenv.load_dotenv()

bot = Bot(token=os.getenv('TOKEN'))
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

session = sessionmaker(bind=database_dsn)()


class TranslateForm(StatesGroup):
    lang_src = State()
    lang_dst = State()
    execute = State()


class Form(StatesGroup):
    repeat = State()
    note = State()
    magazine = State()


technical_site = 'site:darwin.md'


@dp.message_handler(commands=['start'])
async def send_greeting(message: types.Message):
    sti = open('static/car.gif', 'rb')
    await bot.send_sticker(message.chat.id, sti)
    me = await bot.get_me()
    await message.reply(f'–ü—Ä–∏–≤–µ—Ç, —è <b>{me.first_name}</b>\n'
                        f'–ì–æ—Ç–æ–≤ —Ç–µ–±–µ —Å–ª—É–∂–∏—Ç—å - <b>{message.chat.first_name}</b>', parse_mode='html')


@dp.message_handler(commands=['menu'])
async def create_menu(message: types.Message):
    markup = types.ReplyKeyboardMarkup(row_width=3, resize_keyboard=True, one_time_keyboard=True, keyboard=[
        [
            types.KeyboardButton('/–ø–æ–≤—Ç–æ—Ä—è–π_–∑–∞_–º–Ω–æ–π'),
            types.KeyboardButton('/–∑–∞–º–µ—Ç–∫–∏'),
        ],
        [
            types.KeyboardButton('/—Å–ª—É—á–∞–π–Ω–∞—è_—à—É—Ç–∫–∞'),
            types.KeyboardButton('/–ø–µ—Ä–µ–≤–µ–¥–∏_—Ç–µ–∫—Å—Ç'),
        ],
        [
            types.KeyboardButton('/–ø–æ–∏—Å–∫_–≤_–º–∞–≥–∞–∑–∏–Ω–∞—Ö')
        ],

    ])

    await bot.send_message(message.chat.id, '–ú–µ–Ω—é:', reply_markup=markup)


@dp.message_handler(state='*', commands='–æ—Ç–∫–ª—é—á–∏—Ç—å_–ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ')
async def handler_cancel(message: types.Message, state: FSMContext):
    current_state = await state.get_state()
    if current_state is None:
        return

    logging.info('Cancelling state %r', current_state)
    await state.finish()
    await message.reply('–£—Å–ø–µ—à–Ω–æ')


@dp.message_handler(commands=['–ø–æ–≤—Ç–æ—Ä—è–π_–∑–∞_–º–Ω–æ–π'], state='*')
async def command_repeat(message: types.Message):
    logging.info(f'The bot started repeating after the user {message.from_user.id}')
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, keyboard=[[types.KeyboardButton('/–æ—Ç–∫–ª—é—á–∏—Ç—å_–ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ')]],
                                       one_time_keyboard=True)
    await Form.repeat.set()
    await message.reply('–ù–∞–ø–∏—à–∏ —á—Ç–æ-—Ç–æ:', reply_markup=markup)


@dp.message_handler(state=Form.repeat)
async def handler_repeat(message: types.Message):
    await message.reply(message.text)


@dp.message_handler(state='*', commands='–∑–∞–º–µ—Ç–∫–∏')
async def notes(message: types.Message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, keyboard=[
        [
            types.KeyboardButton('/—Å–æ–∑–¥–∞—Ç—å_–∑–∞–º–µ—Ç–∫—É'),
        ],
        [
            types.KeyboardButton('/–ø–æ—Å–ª–µ–¥–Ω—è—è_–∑–∞–º–µ—Ç–∫–∞'),
        ],
        [
            types.KeyboardButton('/–ø–æ–∏—Å–∫_–∑–∞–º–µ—Ç–æ–∫'),
        ],
    ])
    await message.reply('–í—ã–±–µ—Ä–∏—Ç–µ:', reply_markup=markup)


@dp.message_handler(state='*', commands='—Å–æ–∑–¥–∞—Ç—å_–∑–∞–º–µ—Ç–∫—É')
async def command_note(message: types.Message):
    logging.info(f'The note was created by the user {message.from_user.id}')
    await Form.note.set()
    await bot.send_message(
        message.chat.id,
        '–ù–∞–ø–∏—à–∏—Ç–µ –∑–∞–º–µ—Ç–∫—É –∏ —è –µ—ë –∑–∞–ø–∏—à—É\n(P.S: –∫–ª—è–Ω—É—Å—å —á—Ç–æ –Ω–∏–∫–æ–º—É –Ω–µ –ø–æ–∫–∞–∂—É üòÅ)',
        parse_mode='html'
    )


@dp.message_handler(state=Form.note)
async def save_note(message: types.Message, state: FSMContext):
    logging.info(f'The note was saved for the user {message.from_user.id}')
    query = Note(user_id=message.from_user.id, note=message.text, created_at=datetime.datetime.now())
    session.add(query)
    session.commit()
    await state.finish()
    await bot.send_message(message.chat.id, '–ó–∞–ø–∏—Å–∞–ª, —Å–ø–∞—Å–∏–±–æ –∑–∞ –¥–æ–≤–µ—Ä–∏–µ  üòâ')


@dp.message_handler(commands='–ø–æ—Å–ª–µ–¥–Ω—è—è_–∑–∞–º–µ—Ç–∫–∞', state='*')
async def command_my_note(message: types.Message, state: FSMContext):
    logging.info(f'The last note was viewed by the user {message.from_user.id}')
    try:
        my_note = session.query(Note).filter(Note.user_id == message.from_user.id).order_by(Note.id.desc()).first()
        await bot.send_message(message.chat.id, my_note.note)
        await state.finish()
    except AttributeError as e:
        await bot.send_message(message.chat.id, f'–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–º–µ—Ç–æ–∫\n')
        logging.info(f' Error: {e} with user. Error occurred with user: {message.from_user.id}')


@dp.message_handler(commands='—Å–ª—É—á–∞–π–Ω–∞—è_—à—É—Ç–∫–∞')
async def handler_joke(message: types.Message):
    logging.info(f'The joke was created by the user {message.from_user.id}')
    url = r"https://official-joke-api.appspot.com/random_joke"
    request = requests.get(url)
    data = json.loads(request.text)
    await bot.send_message(message.chat.id, '–í–æ—Ç –∏ —Ç–≤–æ—è —à—É—Ç–∫–∞')
    await asyncio.sleep(1)
    await bot.send_message(message.chat.id, data["setup"])
    await asyncio.sleep(3)
    await bot.send_message(message.chat.id, data['punchline'])


@dp.message_handler(state='*', commands='–ø–µ—Ä–µ–≤–µ–¥–∏_—Ç–µ–∫—Å—Ç')
async def handler_translate(message: types.Message):
    await bot.send_message(message.chat.id, '–ü—Ä–∞–≤–∏–ª–∞:\n1.–Ø–∑—ã–∫ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–∞–ø–∏—Å–∞–Ω –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º<b>!</b>\n'
                                            '<b>–ü—Ä–∏–º–µ—Ä</b>: Russian –∏–ª–∏ ru\n'
                                            '2.–î–æ—Å—Ç—É–ø–Ω—ã –ø–æ—á—Ç–∏ –≤—Å–µ —è–∑—ã–∫–∏ –º–∏—Ä–∞<b>!</b>\n'
                                            '3.–ï—Å–ª–∏ –≤—ã –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–µ–ø—Ä–∞–≤–∏–ª–Ω—ã–π —è–∑—ã–∫ —Ç–æ –ø–µ—Ä–µ–≤–æ–¥ –±—É–¥–µ—Ç <b>–ù–µ–≤–µ—Ä–Ω—ã–π!</b>\n'
                                            '4.–¢–µ–∫—Å—Ç –Ω–µ –¥–æ–ª–∂–µ–Ω –ø—Ä–µ–≤—ã—à–∞—Ç—å 1000 —Å–∏–º–≤–æ–ª–æ–≤<b>!</b>',
                           parse_mode='html')
    await message.reply('–ù–∞ –∫–∞–∫–æ–º —è–∑—ã–∫–µ –Ω–∞–ø–∏—Å–∞–Ω –≤–∞—à —Ç–µ–∫—Å—Ç?')
    await TranslateForm.lang_src.set()


@dp.message_handler(state=TranslateForm.lang_src)
async def handler_translate_lang_src(message: types.Message, state: FSMContext):
    lang_src = message.text
    await state.update_data({'lang_src': lang_src})

    await message.reply('–í –∫–∞–∫–æ–π —è–∑—ã–∫ –≤—ã —Ö–æ—Ç–∏—Ç–µ –µ–≥–æ –ø–µ—Ä–µ–≤–µ—Å—Ç–∏?')
    await TranslateForm.lang_dst.set()


@dp.message_handler(state=TranslateForm.lang_dst)
async def handler_translate_lang_dst(message: types.Message, state: FSMContext):
    lang_dst = message.text
    await state.update_data({'lang_dst': lang_dst})

    await bot.send_message(message.chat.id, '–ü–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç:\n'
                                            '<b>Warning - (–¢–µ–∫—Å—Ç –Ω–µ –¥–æ–ª–∂–µ–Ω –ø—Ä–µ–≤—ã—à–∞—Ç—å 1000 —Å–∏–º–≤–æ–ª–æ–≤)</b>',
                           parse_mode='html')
    await TranslateForm.execute.set()


@dp.message_handler(state=TranslateForm.execute)
async def handler_translate_execute(message: types.Message, state: FSMContext):
    translator = Translator()
    data = await state.get_data()
    lang_src = data.get('lang_src')
    lang_dst = data.get('lang_dst')
    try:
        result = translator.translate(message.text[:1000], src=lang_src, dest=lang_dst)
        query = Translation(user_id=message.from_user.id,
                            original_text=message.text,
                            translation_text=result.text,
                            original_language=result.src,
                            translation_language=result.dest,
                            created_at=datetime.datetime.now(),
                            )
        session.add(query)
        session.commit()
        await bot.send_message(message.chat.id, result.text)
        await state.finish()
    except ValueError as e:
        await bot.send_message(message.chat.id, f'–í—ã –≤–≤–µ–ª–∏ –Ω–µ–≤–µ—Ä–Ω—ã–π —è–∑—ã–∫ - {e}')
        await handler_translate(message)


@dp.inline_handler(lambda query: len(query.query) > 0, state='*')
async def view_data(query: types.InlineQuery):
    if query.query.lower().split(':')[0] == 'notes':
        note_title, save_note_data = await handler_notes(query)
        await bot.answer_inline_query(note_title, save_note_data, cache_time=False)
    elif query.query.lower().split(':')[0] == 'shop':
        product_title, save_product_data = await handler_goods(query)
        await bot.answer_inline_query(product_title, save_product_data, cache_time=False)
        await Form.magazine.set()


@dp.message_handler(commands=['–ø–æ–∏—Å–∫_–∑–∞–º–µ—Ç–æ–∫'])
async def command_notes(message: types.Message):
    logging.info(f'A user has started searching for notes {message.from_user.id}')
    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(types.InlineKeyboardButton('–ü–æ–∏—Å–∫', switch_inline_query_current_chat='notes:'))
    await bot.send_message(message.chat.id, "–ü–æ–∏—Å–∫ –∑–∞–º–µ—Ç–æ–∫:", reply_markup=keyboard)


@dp.inline_handler()
async def handler_notes(note_title):
    name = note_title.query.lower().split(':')[-1]
    note_data = session.query(Note).filter((Note.note.contains(name)) &
                                           (Note.user_id == note_title.from_user.id)).limit(20)
    save_note_data = []
    for i in note_data:
        content = types.InputTextMessageContent(
            message_text=f'–¢–≤–æ—è –∑–∞–ø–∏—Å—å: {i.note}',
        )

        data = types.InlineQueryResultArticle(
            id=i.id,
            title=i.note,
            description=f'–ó–∞–ø–∏—Å—å –±—ã–ª–∞ —Å–æ–∑–¥–∞–Ω–∞: {i.created_at}',
            input_message_content=content
        )
        save_note_data.append(data)
    return note_title.id, save_note_data


@dp.message_handler(commands='–ø–æ–∏—Å–∫_–≤_–º–∞–≥–∞–∑–∏–Ω–∞—Ö')
async def command_goods(message: types.Message):
    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(types.InlineKeyboardButton('–ü–æ–∏—Å–∫', switch_inline_query_current_chat='shop:'))
    await bot.send_message(message.chat.id, "–ü–æ–∏—Å–∫ –º–∞–≥–∞–∑–∏–Ω–æ–≤:", reply_markup=keyboard)


@dp.inline_handler()
async def handler_goods(product_title):
    product_name = product_title.query.lower().split(':')[-1]
    save_product_data = []
    i = 0
    page = 1
    elements = 0
    while True:
        r = requests.get(f'https://e-catalog.md/ro/search?q={product_name}&page={page}')
        html = BeautifulSoup(r.text, 'html.parser')
        items = html.select('.products-list__body > .products-list__item')
        if len(items):
            for el in items:
                if elements == 20:
                    break
                else:
                    image = el.select('.product-card > .product-card__image > a > img')
                    title = el.select('.product-card > .product-card__info > .product-card__name > a')
                    price = el.select('.product-card > .product-card__actions > .product-card__prices > span')

                    if not price:
                        price = 'Not found'
                    else:
                        price = price[0].text

                    content = types.InputTextMessageContent(
                        message_text=title[0].get('href')
                    )
                    i += 1
                    elements += 1
                    data = types.InlineQueryResultArticle(
                        id=str(i),
                        title=f'–ù–∞–∑–≤–∞–Ω–∏–µ: {title[0].text}',
                        description=f'–¶–µ–Ω–∞: {price}',
                        input_message_content=content,
                        thumb_url=image[0].get('src'),
                        thumb_width=48,
                        thumb_height=48

                    )
                    save_product_data.append(data)
                    continue
            page += 1
        return product_title.id, save_product_data


@dp.message_handler(state=Form.magazine)
async def detail_good(message: types.Message, state: FSMContext):
    detail_goods = message.text
    await state.update_data({'detail_goods': detail_goods})
    data = await state.get_data()

    data = data.get('detail_goods')
    try:
        request = requests.get(data)
        html_content = BeautifulSoup(request.text, 'html.parser')
        await bot.send_message(message.chat.id, '–û–¥–Ω—É —Å–µ–∫—É–Ω–¥—É, —Å–æ–±–∏—Ä–∞—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é...')
        await asyncio.sleep(2)
    except Exception as e:
        await state.finish()
        logging.info(f'Basic search error with user {message.from_user.id}. GREEN code - {e}')
    else:
        column = []
        row = []
        for detail_data in html_content.select(
                '.product-tabs > .product-tabs__content > .product-tabs__pane > .spec > .spec__section > .spec__row'):
            title = detail_data.select('.spec__name')
            detail = detail_data.select('.spec__value')
            await bot.send_message(message.chat.id, f'{title[0].text} = {detail[0].text}')
            row.append(title[0].text)
            column.append(detail[0].text)
            await state.finish()
            continue
        draw_font_table(None, row, column)

if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)
